<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
    <artifactId>external-python-matcher-hobbit</artifactId><!-- id used as matcher id in descriptor file of seals package and as the project name in gitlab (hobbit) -->
    <packaging>jar</packaging>
    <version>1.0</version><!-- version appearing in descriptor file of seals package and system.ttl file in hobbit -->
    <description>External Python matcher hobbit demo</description><!-- description appearing in descriptor file of seals package and system.ttl file in hobbit -->
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <oaei.mainClass>de.uni_mannheim.informatik.dws.melt.demomatcher.DemoPythonMatcher</oaei.mainClass><!-- mandatory: this class has to implement IOntologyMatchingToolBridge -->
        <oaei.copyright>(C) Mannheim, 2019</oaei.copyright> <!--optional copyright appearing in the seals descriptor file -->
        <oaei.license>GNU Lesser General Public License 2.1 or above</oaei.license> <!--optional license appearing in the seals descriptor file -->

        <maven.deploy.skip>true</maven.deploy.skip><!-- needed to call mvn deploy without having a distributionManagement -->
        <matching.version>3.3</matching.version> <!-- version for all matching related packages -->
    </properties>
    
    
    <dependencies>
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>matching-base</artifactId>
            <version>${matching.version}</version>
        </dependency>
        
        <!-- remove the follwing dependency when building a seals package to create smaller packages with less depedendencies. -->
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>matching-eval</artifactId>
            <version>${matching.version}</version>
            <scope>test</scope>
        </dependency>
        
        <!-- This dependency is necessary for hobbit submission. It contains the wrapper. -->
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>receiver-hobbit</artifactId>
            <version>${matching.version}</version>
        </dependency>
        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.25</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- the following plugin will:
            1. create a project (if not already existent) in gitlab with the name of the artifactId
            2. create or update a system.ttl file which describes the matching system so that version and implementing benchmarks are updated
            3. set the maven property ${hobbit.imageURL} to the correct value which is normally "git.project-hobbit.eu:4567/${username}/${artifactId}:${project.version}
            (if you create the gitlab project and system.ttl on your own you can comment out this plugin but then you have to set "hobbit.imageURL" in the properties section of this pom.)
            The plugin has to appear before the docker-maven-plugin because it generates the maven property used there.
            To remove the matcher from the platform just delete the Gitlab project.--> 
            <plugin>
                <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
                <artifactId>matching-maven-plugin</artifactId>
                <version>${matching.version}</version>
                <configuration>
                    <!-- inline authConfig not recommended but possible (in case you use accesstoken, you can omit the username here and only here).
                         Better use settings xml (one example is shown at the end of the file)
                    <authConfig>
                        <username>{hobbit_username}</username>
                        <password>{hobbit_password_or_accesstoken}</password>
                    </authConfig>
                    -->
                    <benchmarks>
                        <!-- in case you change the benchmarks, you also have to increase your version number -->
                        <benchmark>bench:AnatomyAPI</benchmark>
                        <benchmark>bench:ConferenceAPI</benchmark>
                        <benchmark>bench:SpatialAPI</benchmark>
                        <benchmark>bench:spimbenchAPI</benchmark>
                        <benchmark>bench:knowledgegraph</benchmark>
                        <benchmark>bench:LargebioAPI</benchmark>
                    </benchmarks>
                </configuration>
                <executions>
                    <execution>
                        <goals><goal>prepareHobbitGitlab</goal></goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.36.0</version>                
                <configuration>
                    <!-- further machine configuration options: https://dmp.fabric8.io/#docker-machine
                         Use the following line in case you have installed docker on windows or mac
                    <machine><name>default</name></machine>
                    -->

                    <!-- inline authConfig not recommended but possible (in case you use accesstoken, you can omit the username here and only here).
                         Better use settings xml (one example is shown at the end of the file)
                    <authConfig>
                        <username>{hobbit_username}</username>
                        <password>{hobbit_password_or_accesstoken}</password>
                    </authConfig>
                    -->
                    
                    <images>
                        <image>
                            <name>${oaei.imageURL}</name>
                            <build>
                                <from>python:3.8.4-alpine3.12</from><!--change it to a docker base image you want - this is just a small image which contains python 3.8.4-->
                                <runCmds>
                                    <run>pip install rdflib</run><!-- install all your python dependencies here -->
                                    <run>apk add --update openjdk8-jre</run><!-- install java because we need it -->
                                </runCmds>
                                <assembly><descriptorRef>hobbit</descriptorRef></assembly>
                                <cmd><shell>java -cp "${project.build.finalName}.${project.packaging}:lib/*" org.hobbit.core.run.ComponentStarter de.uni_mannheim.informatik.dws.melt.receiver_hobbit.HobbitWrapper</shell></cmd>
                                <workdir>/maven</workdir>
                            </build>
                        </image>
                    </images>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
                        <artifactId>matching-assembly</artifactId>
                        <version>${matching.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal><!--install phase-->
                            <goal>push</goal><!--deploy phase-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            
            
        </plugins>
    </build>
</project>


<!-- Example for settings.xml file which is usually located at ~/.m2/settings.xml 
     (As absolute path in Windows: C:\Users\{user}\.m2\settings.xml and in Unix based systems: /home/{user}/.m2/settings.xml ).
     You can create the file if it does not exist. 
     The username is the hobbit username and the password can either be the password used in hobbit or 
     an access token created in the gitlab instance of hobbit (https://git.project-hobbit.eu). 
     More info at https://dwslab.github.io/melt/matcher-packaging/hobbit

<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      https://maven.apache.org/xsd/settings-1.0.0.xsd">
  <servers>
    <server>
      <id>git.project-hobbit.eu:4567</id>
      <username>{hobbit_username}</username>
      <password>{hobbit_password_or_accesstoken}</password>
    </server>
  </servers>
</settings>

-->